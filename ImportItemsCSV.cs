using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using GenericParsing;
using System.Data;
using System.Windows.Forms;

namespace RBOS
{
    class ImportItemsCSV
    {
        #region LastMessage
        private static string _LastMessage = "";
        public static string LastMessage
        {
            get { return _LastMessage; }
        }
        #endregion

        #region ImportFile
        public static bool ImportFile(string Filename, bool IncludeNewItems)
        {
            _LastMessage = "";
            GenericParser parser = null;
            ProgressForm progress = new ProgressForm("");

            // check we got a valid filename
            if (!File.Exists(Filename))
            {
                _LastMessage = db.GetLangString("ImportItemsCSV.FileDoesNotExist");
                return false;
            }

            db.StartTransaction();

            try
            {
                progress.ProgressMax = tools.GetNumLinesInFile(Filename);
                progress.Show();

                // create header record in table ItemUpdates
                db.ExecuteNonQuery(string.Format(
                    " insert into ItemUpdates " +
                    " (UpdDate,Origin) " +
                    " values ('{0}','CSV') ",
                    DateTime.Now));

                // counters to be inserted in header record when details are done
                int NoOfLines = 0;
                int NoOfOpen = 0;

                // extract autogenerated header ID
                int ID = tools.object2int(db.ExecuteScalar(" select max(ID) from ItemUpdates "));

                // parse each line in the file and insert records in database
                parser = tools.CreateCSVParser(Filename, ';', true); //Encoding.GetEncoding("iso-8859-1"));
                while (parser.Read())
                {
                    // get the values in the line
                    double Barcode = tools.object2double(parser[0].Trim());
                    double OrderingNumber = tools.object2double(parser[1].Trim());
                    string ItemName = parser[2].Trim();
                    int Kolli = tools.object2int(parser[3].Trim());
                    string SubCategoryID = parser[4].Trim(); // Subcat
                    double CostPrice = tools.object2double(parser[5].Trim()); // Kostpris
                    double SalesPrice = tools.object2double(parser[6].Trim()); // Salgspris
                    int SupplierNo = tools.object2int(parser[7].Trim()); // Leverandørnr

                    // update progress message
                    progress.StatusText = ItemName;

                    // map supplierno to our supplierno
                    SupplierNo = dbSupplier.GetSupplierID(SupplierNo);

                    // variable FoundBarcode used in criteria checks
                    // (true if the barcode exists in the database)
                    bool FoundBarcode = !tools.IsNullOrDBNull(db.ExecuteScalar(string.Format(
                        " select Barcode from Barcode " +
                        " where Barcode = {0} ", Barcode)));

                    // variable FoundSupplierRow is used to get data for the found supplier row,
                    // and to tell whether the combination of OrderingNumber and SupplierNo exists
                    // in the database. if the combination does not exist, the variable is null.
                    DataRow FoundSupplierItemRow = db.GetDataRow(string.Format(
                            " select * from SupplierItem " +
                            " where (OrderingNumber = {0}) " +
                            " and (SupplierNo = {1}) ",
                            OrderingNumber,
                            SupplierNo));

                    // if set to true, the record is
                    // not included for update
                    bool SkipRecord = false;

                    // check for a special condition where:
                    // criteria: if CostPrice or SalesPrice are 0
                    // criteria: we already have the item
                    // then do not include the record for import
                    if (((CostPrice == 0) || (SalesPrice == 0)) &&
                        (FoundBarcode || (FoundSupplierItemRow != null) ||
                        ItemDataSet.XVDDataFoundInInactiveItems(Barcode, OrderingNumber, SupplierNo)))
                    {
                        // this is an item we already have
                        // and that LL does not have the costprice
                        // or salesprice for, and therefore must
                        // be an item that is from another supplier
                        SkipRecord = true;
                    }

                    if (!SkipRecord)
                    {
                        // detect ActionNewItem.
                        // criteria: neither barcode nor supplier info can be found in db.
                        bool ActionNewItem = (!FoundBarcode && (FoundSupplierItemRow == null));

                        // detect ActionNewCostPrice.
                        // criteria: supplier info can be found in db.
                        // criteria: costprice must be different.
                        bool ActionNewCostPrice = false;
                        double dbCostPrice = 0;
                        double dbSalesPrice = 0; // can be set in both CostPrice and SalesPrice changes
                        if (FoundSupplierItemRow != null)
                        {
                            // check that costprice is different
                            dbCostPrice = tools.object2double(FoundSupplierItemRow["PackageUnitCost"]);
                            if (Math.Round(dbCostPrice, 3) != CostPrice)
                            {
                                // also get the existing salesprice
                                // on the item to show to user
                                int ItemID = tools.object2int(FoundSupplierItemRow["ItemID"]);
                                dbSalesPrice = ItemDataSet.ItemDataTable.GetPOSSalesPrice(ItemID);

                                // now we can flag new costprice action
                                ActionNewCostPrice = true;
                            }
                        }

                        // detect action New Sales Price.
                        // criteria: either barcode or supplier info must be found in db.
                        // criteria: only 1 supplieritem and 1 salespack must exist.
                        // criteria: salesprice must be different than on disk.
                        // criteria: salesprice must be different that 0
                        // NOTE: use variable SalesPrice, NOT E_PRIS/VEJLUDS
                        bool ActionNewSalesPrice = false;
                        if (SalesPrice != 0)
                        {
                            if (FoundBarcode || (FoundSupplierItemRow != null))
                            {
                                // get the ItemID either via barcode or supplieritem info
                                int ItemID = 0;
                                if (FoundBarcode)
                                    ItemID = ItemDataSet.ItemDataTable.GetItemIDFromBarcode(Barcode);
                                else if (FoundSupplierItemRow != null)
                                    ItemID = ItemDataSet.ItemDataTable.GetItemIDFromSupplierItem(
                                        tools.object2int(FoundSupplierItemRow["SupplierNo"]),
                                        tools.object2double(FoundSupplierItemRow["OrderingNumber"]));

                                // only set ActionNewSalesPrice if
                                // only one salespack exists on the item
                                if (ItemDataSet.ItemDataTable.NumSalesPacksOnItem(ItemID) == 1)
                                {
                                    // check that salesprice is different
                                    dbSalesPrice = tools.object2double(db.ExecuteScalar(string.Format(
                                        " select SalesPrice " +
                                        " from SalesPack " +
                                        " where ItemID = {0} ",
                                        ItemID)));
                                    if (Math.Round(dbSalesPrice, 2) != SalesPrice)
                                    {
                                        // now we can flag new salesprice action
                                        ActionNewSalesPrice = true;
                                    }
                                }
                            }
                        }

                        // detect action New Barcode.
                        // criteria: barcode not 0
                        // criteria: barcode not found but supplier info found
                        // criteria: barcode is different
                        bool ActionNewBarcode = false;
                        if (Barcode != 0)
                        {
                            if (!FoundBarcode && (FoundSupplierItemRow != null))
                            {
                                // check that barcode is different
                                // (assumes that a barcode can only exists once in the Barcode table)
                                int tmpNumBarcodes = tools.object2int(db.ExecuteScalar(string.Format(
                                    " select count(*) " +
                                    " from Barcode " +
                                    " where Barcode = {0} ",
                                    Barcode)));
                                if (tmpNumBarcodes < 1)
                                {
                                    // now we can flag new barcode action
                                    ActionNewBarcode = true;
                                }
                            }
                        }

                        // detect action New Supplier Item Number.
                        // criteria: barcode found but supplier info not found
                        bool ActionNewSupplierItemNo = false;
                        // use ealier declared variable dbCostPrice to
                        // insert the latest cost price from item so it is not empty to user
                        ActionNewSupplierItemNo = (FoundBarcode && (FoundSupplierItemRow == null));
                        if (ActionNewSupplierItemNo)
                        {
                            int ItemID = ItemDataSet.ItemDataTable.GetItemIDFromBarcode(Barcode);
                            dbCostPrice = ItemDataSet.ItemDataTable.GetCostPriceLatest(ItemID);
                        }

                        // detect action No Change
                        bool ActionNoChange = false;
                        string ActionSummary = ItemUpdLines.BuildActionSummary(
                            ActionNewItem,
                            ActionNewCostPrice,
                            ActionNewSalesPrice,
                            ActionNewBarcode,
                            ActionNewSupplierItemNo,
                            false, //ActionItemDiscarded
                            ref ActionNoChange);

                        // various reasons for skipping the record
                        bool SkipFlag = false;
                        if (ItemDataSet.SubCategoryDataTable.GetSubCategoryRow(SubCategoryID) == null) // subcategory not found
                            SkipFlag = true;
                        if (ActionNewItem && !IncludeNewItems) // new item but user has chosen not to include new items
                            SkipFlag = true;

                        // get the next lineno for this detail records in table ItemUpdLines
                        int LineNo = tools.object2int(db.ExecuteScalar(string.Format(
                            " select max(LineNo) " +
                            " from ItemUpdLines " +
                            " where ID = {0} ", ID))) + 1;

                        ImportDataSet.LookupLLStatusDataTable.LLStatus Status = (ActionNoChange || SkipFlag) ? ImportDataSet.LookupLLStatusDataTable.LLStatus.Closed : ImportDataSet.LookupLLStatusDataTable.LLStatus.Open;

                        // if action is new item, use LL item name
                        // otherwise use our itemname, so user can reconize it
                        string Name = "";
                        if (ActionNewItem)
                            Name = ItemName;
                        else
                        {
                            int ItemID = 0;
                            if (FoundBarcode)
                            {
                                ItemID = tools.object2int(db.ExecuteScalar(string.Format(
                                    " select ItemID from Barcode " +
                                    " where Barcode = {0} ",
                                    Barcode)));
                            }
                            else if (FoundSupplierItemRow != null)
                            {
                                ItemID = tools.object2int(FoundSupplierItemRow["ItemID"]);
                            }
                            Name = tools.object2string(db.ExecuteScalar(string.Format(
                                " select ItemName from Item " +
                                " where ItemID = {0} ",
                                ItemID)));
                        }

                        // in any other action type than discarded,
                        // if costprice is 0, handle something
                        if (CostPrice == 0)
                        {
                            // if both costprice and salesprice
                            // are zero, set costprice to 1.0
                            if (SalesPrice == 0)
                                CostPrice = 1.0;
                            else
                            {
                                // salesprice is different from zero,
                                // attempt to calculate the costprice
                                // using margin and salesprice
                                double BudgetMargin = ItemDataSet.SubCategoryDataTable.GetBudgetMargin(SubCategoryID);
                                if (BudgetMargin != 0)
                                    CostPrice = tools.CalcCostPrice(BudgetMargin, SalesPrice);
                                else
                                    CostPrice = 1.0;
                            }
                        }

                        // if ActionNewItem or ActionNewSupplierItemNo,
                        // disable any possible actions on
                        // NewBarcode, NewCostPrice and NewSalesPrice
                        if (ActionNewItem || ActionNewSupplierItemNo)
                        {
                            ActionNewBarcode = false;
                            ActionNewCostPrice = false;
                            ActionNewSalesPrice = false;
                        }

                        /// if marked as a new item here,
                        /// check if it can be found in inactive items.
                        /// if so, do not insert the item here but
                        /// update the inactive item instead.
                        bool FoundInInactiveItems = false;
                        if (ActionNewItem)
                        {
                            FoundInInactiveItems = ItemDataSet.UpdateXVDDataInInactiveItems(
                                Barcode, OrderingNumber, SupplierNo, CostPrice, SalesPrice, Kolli, 0, 0, 0);
                        }

                        if (!FoundInInactiveItems)
                        {
                            // insert ItemUpdLines record
                            db.ExecuteNonQuery(string.Format(
                                " insert into ItemUpdLines " +
                                " (ID,LineNo,LLAction,Name,Category,PackType,LLSalesPr,SalesPrice,Barcode," +
                                "  SupplierNo,OrderingNumber,Kolli,CostPrice,FixedPrice,SubstNr,EnhBeteg,ActionSummary," +
                                "  ActionNewItem,ActionNewCostPrice,ActionNewSalesPrice," +
                                "  ActionNewSupplierItemNo,ActionNewBarcode,ActionItemDiscarded,Skip,Status," +
                                "  SubCat,LogCost,LogSales,NoChSales) " +
                                " values ({0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}," +
                                " {11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21}," +
                                " {22},{23},{24},{25},{26},{27},{28}) ",
                                ID,
                                LineNo,
                                "NULL",                                     // field LLAction
                                tools.string4sql(Name, 25),                 // field Name
                                SubCategoryID,                              // field Category (LL category)
                                1,                                          // field PackType set to Stk
                                "NULL",                                     // field LLSalesPr
                                tools.decimalnumber4sql(SalesPrice),        // field SalesPrice
                                tools.decimalnumber4sql(Barcode),           // field Barcode
                                SupplierNo,                                 // field SupplierNo
                                OrderingNumber,                             // field OrderingNumber
                                Kolli,                                      // field Kolli
                                tools.decimalnumber4sql(CostPrice),         // field CostPrice
                                "NULL",                                     // field FixedPrice
                                "NULL",                                     // field SubstNr
                                tools.string4sql(Kolli, 6),                 // field EnhBeteg (should not be used as field Kolli is used)
                                tools.string4sql(ActionSummary, 30),        // field ActionSummary
                                ActionNewItem,
                                ActionNewCostPrice,
                                ActionNewSalesPrice,
                                ActionNewSupplierItemNo,
                                ActionNewBarcode,
                                false,                                      // field ActionItemDiscarded
                                SkipFlag,                                   // field Skip
                                (int)Status,                                // field Status
                                tools.string4sql(SubCategoryID, 25),        // field SubCat
                                tools.decimalnumber4sql(dbCostPrice),       // field LogCost
                                tools.decimalnumber4sql(dbSalesPrice),      // field LogSales
                                false));                                    // field NoChSales

                            // increment counters for header record
                            ++NoOfLines;
                            if (Status != ImportDataSet.LookupLLStatusDataTable.LLStatus.Closed)
                                ++NoOfOpen;
                        }
                    } // if !SkipRecord
                }

                // update header records with counters
                db.ExecuteNonQuery(string.Format(
                    " update ItemUpdates set " +
                    " NoOfLines = {0}, " +
                    " NoOfOpen = {1} " +
                    " where ID = {2} ",
                    NoOfLines, NoOfOpen, ID));


                // commit transaction and report success
                db.CommitTransaction();
                _LastMessage = db.GetLangString("ImportItemsCSV.ImportSuccessful");
                return true;
            }
            catch (Exception ex)
            {
                string msg = log.WriteException("Error loading item CSV file: " + Filename, ex.Message, ex.StackTrace);
                MessageBox.Show(msg);
                return false;
            }
            finally
            {
                if (parser != null)
                    parser.Close();
                if (db.CurrentTransaction != null)
                    db.RollbackTransaction();
                progress.Close();
            }
        }
        #endregion
    }
}
