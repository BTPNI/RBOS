#region Documentation

/// DELETING A DEBTOR AND POSSIBLY REUSING THE DEBTORNO
/// When user deletes a debtor, this can only be done if no
/// transactions for that debtor exists in table EOD_LocalCred.
/// The deleted autogenerated DebtorNo can be reused after a shrink of the
/// MS Access database, without problems. This is possible because no transactions are
/// present for that DebtorNo and therefore a new debtor with the same
/// DebtorNo will not risk to "inherit" a previous debtor's transactions.

#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace RBOS
{
    public partial class EODDebtor : Form
    {
        #region Private variables

        private FormState CurrentState = FormState.View;

        #endregion

        #region FormState enum
        /// <summary>
        /// Enum used for selecting form state
        /// using method SetFormState.
        /// </summary>
        private enum FormState
        {
            View,
            Edit,
            New
        }
        #endregion

        #region Constructor
        public EODDebtor()
        {
            InitializeComponent();
            LoadDebtorList();
            LoadDebtor();
            SetFormState(FormState.View); // must be called after above LoadDebtorList method

            colBookDate.DisplayIndex = 0;
            colRemark.DisplayIndex = 1;
            colAmount.DisplayIndex = 2;
            colTransType.DisplayIndex = 3;

            // load lookup data
            adapterLookupEODLocalCredTransType.Connection = db.Connection;
            adapterLookupEODLocalCredTransType.Fill(dsEOD.LookupEODLocalCredTransType);

            // RRNumber textbox and label are only visible if værksted program enabled
            bool VPRG_enabled =db.GetConfigStringAsBool("VPRG.Enabled");
            txtRRNumber.Visible = VPRG_enabled;
            lbRRNumber.Visible = VPRG_enabled;

            // localization
            lbDebtor.Text = db.GetLangString("EODDebtor.lbDebtor");
            tabGeneral.Text = db.GetLangString("EODDebtor.tabGeneral");
            tabTransactions.Text = db.GetLangString("EODDebtor.tabTransactions");
            lbDebtorNo.Text = db.GetLangString("EODDebtor.lbDebtorNo");
            lbName.Text = db.GetLangString("EODDebtor.lbName");
            lbAddress.Text = db.GetLangString("EODDebtor.lbAddress");
            lbZipCodeCity.Text = db.GetLangString("EODDebtor.lbZipCodeCity");
            lbPhone.Text = db.GetLangString("EODDebtor.lbPhone");
            lbAtt.Text = db.GetLangString("EODDebtor.lbAtt");
            lbActive.Text = db.GetLangString("EODDebtor.lbActive");
            lbBalance.Text = db.GetLangString("EODDebtor.lbBalance");
            colBookDate.HeaderText = db.GetLangString("EODDebtor.colBookDate");
            colTransType.HeaderText = db.GetLangString("EODDebtor.colTransType");
            colRemark.HeaderText = db.GetLangString("EODDebtor.colRemark");
            colAmount.HeaderText = db.GetLangString("EODDebtor.colAmount");
            btnNew.Text = db.GetLangString("Application.New");
            btnEdit.Text = db.GetLangString("Application.Edit");
            btnCancel.Text = db.GetLangString("Application.Cancel");
            btnClose.Text = db.GetLangString("Application.Close");
            btnSave.Text = db.GetLangString("Application.Save");
            btnDelete.Text = db.GetLangString("Application.Delete");
            lbRRNumber.Text = db.GetLangString("EODDebtor.lbRRNumber");
            lbEmployee.Text = db.GetLangString("EODDebtor.lbEmployee");
            lbRemarks.Text = db.GetLangString("EODDebtor.lbRemarks");
        }
        #endregion

        #region SetFormState
        /// <summary>
        /// Enables/disables controls on the form
        /// according to the selected form state.
        /// </summary>
        /// <param name="state"></param>
        private void SetFormState(FormState state)
        {
            CurrentState = state;

            bool VPRG_enabled = db.GetConfigStringAsBool("VPRG.Enabled");

            // enable/disable/show/hide controls
            btnNew.Enabled = (!VPRG_enabled) && (state == FormState.View);
            btnDelete.Enabled = (!VPRG_enabled) && (state == FormState.View) && (dsEOD.EOD_DebtorList.Rows.Count > 0);
            btnEdit.Visible = (state == FormState.View);
            btnEdit.Enabled = (dsEOD.EOD_DebtorList.Rows.Count > 0);
            btnClose.Visible = (state == FormState.View);
            btnSave.Visible = (state == FormState.Edit) || (state == FormState.New);
            btnCancel.Visible = (state == FormState.Edit) || (state == FormState.New);
            txtDebtorNo.ReadOnly = VPRG_enabled || (state == FormState.Edit) || (state == FormState.View);
            txtName1.ReadOnly = VPRG_enabled || (state == FormState.View);
            txtName2.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtAddress1.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtAddress2.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtZipCode.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtCity.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtPhone.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            txtAtt.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);
            chkActive.Enabled = (!VPRG_enabled) && (state == FormState.Edit); // not in new mode as it is always set to true when creating a new record
            comboDebtor.Enabled = (state == FormState.View);
            btnLookupDebtor.Enabled = (state == FormState.View);
            chkEmployee.Enabled = (state == FormState.Edit) || (state == FormState.New);
            txtRemarks.ReadOnly = VPRG_enabled || (state == FormState.View) || (state == FormState.New);

            // save and cancel buttons are placed
            btnSave.Location = btnEdit.Location;
            btnCancel.Location = btnClose.Location;

            // transaction grid
            bool DebtorIsActive = chkActive.Checked;
            gridTransactions.ReadOnly = (state == FormState.View) || (state == FormState.New) || (!DebtorIsActive);
            gridTransactions.DefaultCellStyle.BackColor = ((state == FormState.Edit) && DebtorIsActive) ? SystemColors.Window : SystemColors.Control;
            colTransType.ReadOnly = true;
            colTransType.DefaultCellStyle.BackColor = SystemColors.Control;
            if ((state == FormState.Edit) && (DebtorIsActive))
            {
                // making non-manual transaction records readonly in the grid
                foreach (DataGridViewRow row in gridTransactions.Rows)
                {
                    // (note: do NOT check for manual as a new record is not manual yet and thus will be readonly)
                    int value = tools.object2int(row.Cells[colTransType.Index].Value);
                    if ((value == (int)TransTypeLocalCred.LocalCredit) ||
                        (value == (int)TransTypeLocalCred.LocalCreditPayin))
                    {
                        row.ReadOnly = true;
                        row.DefaultCellStyle.BackColor = SystemColors.Control;
                    }
                }
            }

            // when clicking new, the general tab should be selected
            // and the DebtorNo field should be focused
            if (state == FormState.New)
            {
                tabControl1.SelectedTab = tabGeneral;
                if (txtDebtorNo.CanFocus)
                    txtDebtorNo.Focus();
            }
        }
        #endregion

        #region SelectedDebtorNo
        private int SelectedDebtorNo
        {
            get { return tools.object2int(comboDebtor.SelectedValue); }
        }
        #endregion

        #region LoadDebtorList
        /// <summary>
        /// Loads data for the debtor combo box.
        /// </summary>
        private void LoadDebtorList()
        {
            adapterEODDebtorList.Connection = db.Connection;
            adapterEODDebtorList.Fill(dsEOD.EOD_DebtorList);
        }
        #endregion

        #region LoadDebtor
        /// <summary>
        /// Loads debtor data based on which debtor
        /// has been selected in the debtor combo box
        /// </summary>
        private void LoadDebtor()
        {
            adapterEODDebtor.Connection = db.Connection;
            adapterEODDebtor.Fill(dsEOD.EOD_Debtor, SelectedDebtorNo);
            adapterEODDebtorLocalCred.Connection = db.Connection;
            adapterEODDebtorLocalCred.Fill(dsEOD.EOD_Debtor_LocalCred, SelectedDebtorNo);
            CalcBalance();
        }
        #endregion

        #region SaveDebtor
        /// <summary>
        /// Saves currently edited or new debtor data on the form.
        /// </summary>
        private void SaveDebtor()
        {
            // validate that needed debtor information has been entered
            if (txtName1.Text == "")
            {
                MessageBox.Show(db.GetLangString("EODDebtor.msgEnterName"));
                return;
            }

            if (CurrentState == FormState.New)
            {
                // saving in new mode

                // attempt to create the debtor
                if (txtDebtorNo.Text != "")
                {
                    int DebtorNo = tools.object2int(txtDebtorNo.Text);
                    if (dsEOD.EOD_Debtor.CreateNewRecord(DebtorNo, txtName1.Text))
                    {
                        // reload data
                        LoadDebtorList();
                        LoadDebtor();
                        // position on the record in the combobox
                        int pos = bindingEODDebtorList.Find("DebtorNo", DebtorNo);
                        if (pos >= 0) bindingEODDebtorList.Position = pos;
                        // set formstate
                        SetFormState(FormState.Edit);
                        // focus the Address1 field
                        if (txtAddress1.CanFocus)
                            txtAddress1.Focus();
                    }
                    else
                    {
                        // a debtor with that DebtorNo already exists
                        MessageBox.Show(db.GetLangString("EODDebtor.msgDebtorNoAlreadyExists"));
                        return;
                    }
                }
                else
                {
                    // user must enter a DebtorNo to be able to save
                    MessageBox.Show(db.GetLangString("EODDebtor.msgEnterDebtorNo"));
                    return;
                }
            }
            else
            {
                // saving in edit mode
                bindingEODDebtor.EndEdit();
                gridTransactions.EndEdit();
                bindingEODDebtorLocalCred.EndEdit();

                // save data
                adapterEODDebtor.Update(dsEOD.EOD_Debtor);

                // save transaction data
                adapterEODDebtorLocalCred.Update(dsEOD.EOD_Debtor_LocalCred);

                // if creating new debtor, reload data
                if (CurrentState == FormState.New)
                {
                    // save the new record's position in the combobox
                    int pos = bindingEODDebtorList.Find("DebtorNo", SelectedDebtorNo);

                    // reload data
                    LoadDebtorList();
                    LoadDebtor();

                    // position on the new record in the combobox
                    if (pos >= 0) bindingEODDebtorList.Position = pos;
                }

                // done saving
                SetFormState(FormState.View);
            }
        }
        #endregion

        #region DeleteDebtor
        private void DeleteDebtor()
        {
            string msg = "";

            // check if debtor has transactions, if so delete will not be permitted
            int num = tools.object2int(db.ExecuteScalar(string.Format(
                " select count(*) from EOD_LocalCred where CustomerNo = {0} ", SelectedDebtorNo)));
            if (num > 0)
            {
                msg = db.GetLangString("EODDebtor.msgCannotDeleteDebtorWithTransactions");
                MessageBox.Show(msg);
                return;
            }
            
            // ask user before deleting a debtor
            msg = db.GetLangString("EODDebtor.msgDeleteDebtor");
            if (MessageBox.Show(msg, "", MessageBoxButtons.YesNo) == DialogResult.Yes)
            {
                db.ExecuteNonQuery(string.Format(
                    " delete from EOD_Debtor where DebtorNo = {0} ",
                    SelectedDebtorNo));
                LoadDebtorList();
                LoadDebtor();
            }
        }
        #endregion

        #region CancelDebitor
        /// <summary>
        /// Cancels the current edit or new operation.
        /// </summary>
        private void CancelDebtor()
        {
            LoadDebtor();
            SetFormState(FormState.View);
        }
        #endregion

        #region CalcBalance
        private void CalcBalance()
        {
            double balance = 0;
            foreach (DataRow row in dsEOD.EOD_Debtor_LocalCred.Rows)
            {
                // if transaction type is credit, the amount is a negative number
                if ((row.RowState != DataRowState.Deleted) &&
                    (row.RowState != DataRowState.Detached))
                {
                    if (tools.object2int(row["TransType"]) == (int)TransTypeLocalCred.LocalCredit)
                        balance -= tools.object2double(row["Amount"]);
                    // otherwise the transaction type is either payin or manual.
                    // if it is payin the amount is a positive number and has to be added.
                    // if it is manual the amount is signed and will also be added
                    else
                        balance += tools.object2double(row["Amount"]);
                }
            }
            txtBalance.Text = balance.ToString("n2");
        }
        #endregion

        #region ToggleActiveDebtor
        /// <summary>
        /// Various stuff to be done when checking/unchecking the Active flag.
        /// DO NOT call this in the CheckedChanged event of the checkbox
        /// as this will cause the form to go in editmode when it opens the first time.
        /// </summary>
        private void ToggleActiveDebtor()
        {
            // only allow the Active flag to be set to false if balance is 0
            if ((!chkActive.Checked) && (tools.object2double(txtBalance.Text) != 0))
            {
                chkActive.Checked = true;
                MessageBox.Show(db.GetLangString("EODDebtor.msgCannotUncheckActiveFlag"));
            }

            /// When checking/unchecking the active checkbox,
            /// we want to set the transaction grid's ReadOnly property.
            /// This is done properly by the SetFormState method when
            /// it is called with the FormState.Edit parameter.
            SetFormState(FormState.Edit);
        }
        #endregion

        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void btnNew_Click(object sender, EventArgs e)
        {
            bindingEODDebtor.AddNew();
            SetFormState(FormState.New);
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            SetFormState(FormState.Edit);
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            SaveDebtor();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            CancelDebtor();
        }

        private void EODDebtor_Load(object sender, EventArgs e)
        {
        }

        private void comboDebtor_SelectedIndexChanged(object sender, EventArgs e)
        {
            // when selecting a debtor from the combobox,
            // load data for that debtor
            LoadDebtor();
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            DeleteDebtor();
        }

        private void EODDebtor_KeyDown(object sender, KeyEventArgs e)
        {
           tools.EnterAsTab(e);
        }

        private void dataGridView1_RowValidating(object sender, DataGridViewCellCancelEventArgs e)
        {
            if (bindingEODDebtorLocalCred.Current == null) return;
            DataRowView row = (DataRowView)bindingEODDebtorLocalCred.Current;

            // as user cannot edit a non-manual record, no validation is done
            // (note: do NOT check for manual and return if not, as a new record will fail then)
            if ((tools.object2int(row["TransType"]) == (int)TransTypeLocalCred.LocalCredit) ||
                (tools.object2int(row["TransType"]) == (int)TransTypeLocalCred.LocalCreditPayin))
                return;

            // check if user has entered any data
            if ((row["BookDate"] != DBNull.Value) ||
                (row["Remark"] != DBNull.Value) ||
                (row["Amount"] != DBNull.Value))
            {
                // user has entered some data, so check
                // that all needed values has been entered
                if ((row["BookDate"] == DBNull.Value) ||
                    (row["Remark"] == DBNull.Value) ||
                    (row["Amount"] == DBNull.Value))
                {
                    // Calling cancel on the binder, as we otherwise
                    // get an exception if user is unfinished inserting
                    // data and clicks on a column header. I tried to call
                    // the grid's CancelEdit method instead, but that crashed too.
                    bindingEODDebtorLocalCred.CancelEdit();
                }
                else
                {
                    // if creating a new row and needed values has been entered by user
                    // insert the remaining values behind the scenes
                    if (row.IsNew)
                    {
                        row["TransType"] = TransTypeLocalCred.LocalCreditManual;
                        row["LineNo"] = dsEOD.EOD_Debtor_LocalCred.GetNextLineNo(
                            tools.object2datetime(row["BookDate"]),
                            TransTypeLocalCred.LocalCreditManual);
                        row["CustomerNo"] = SelectedDebtorNo;
                        gridTransactions.Refresh();
                    }
                }
            }
        }

        private void gridTransactions_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            if(bindingEODDebtorLocalCred.Current == null) return;
            DataRowView row = (DataRowView)bindingEODDebtorLocalCred.Current;

            // if grid is in readonly mode or
            // if user is trying to delete a non-manual record
            // do not allow the delete
            if ((gridTransactions.ReadOnly) ||
                (tools.object2int(row["TransType"]) == (int)TransTypeLocalCred.LocalCredit) ||
                (tools.object2int(row["TransType"]) == (int)TransTypeLocalCred.LocalCreditPayin))
            {
                e.Cancel = true;
                return;
            }

        }

        private void tabControl1_Selected(object sender, TabControlEventArgs e)
        {
            // switching to general tab
            if (e.TabPage == tabGeneral)
            {
                // recalculate the balance as transaction
                // records might have been modified
                CalcBalance();
            }
        }

        private void chkActive_MouseUp(object sender, MouseEventArgs e)
        {
            ToggleActiveDebtor();
        }

        private void chkActive_KeyUp(object sender, KeyEventArgs e)
        {
            ToggleActiveDebtor();
        }

        private void btnLookupDebtor_Click(object sender, EventArgs e)
        {
            if (bindingEODDebtorList.Current == null) return;
            DataRowView row = (DataRowView)bindingEODDebtorList.Current;

            EODDebtorPopup popup = new EODDebtorPopup(true);
            popup.SelectedDebtorNo = tools.object2int(row["DebtorNo"]);
            if (popup.ShowDialog(this) == DialogResult.OK)
            {
                int pos = bindingEODDebtorList.Find("DebtorNo", popup.SelectedDebtorNo);
                if ((pos >= 0) && (pos < bindingEODDebtorList.Count))
                {
                    bindingEODDebtorList.Position = pos;
                }
            }            
        }
    }
}